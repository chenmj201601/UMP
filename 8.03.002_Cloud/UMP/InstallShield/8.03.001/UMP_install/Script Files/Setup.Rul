//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"


//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2,szSETUPDIR,szProgram,szCommandLine,svValue,szSysDir,szMsg;
    NUMBER bvOpt1, bvOpt2,nResult,nvSize,nvType,nRootKey,nNum,nvFileHandle1,nvFileHandle2;
    string FileParam,szKey,szTemp,szName,svFindFileName,szString,szTemp1;   
    BOOL     bService,binstall,binstalla;
begin

    ShowObjWizardPages(NEXT);
    
    szTitle = "";
    szMsg1 = ""; 
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
	bvOpt1   = FALSE;
    bvOpt2   = FALSE;    
           
     
      	
	 GetCurrentDir(szSETUPDIR);    
		nRootKey = HKEY_LOCAL_MACHINE;   
		RegDBSetDefaultRoot (nRootKey);      
        nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4.0","",nvType,svValue,nvSize);
  		if (nResult < 0) then
  			nNum = StrLength (szSETUPDIR);  
  			StrSub ( szString,szSETUPDIR,0,nNum);
			nResult = FindFile( szString^"Resources","dotnetfx45_full_x86_x64.exe", svFindFileName );   
            LaunchAppAndWait( szString^"Resources"^svFindFileName, " /lang:ENU", WAIT ); 
  		endif;
         
            nNum =  StrLength (szSETUPDIR);  
          StrSub ( szString,szSETUPDIR,0,nNum);  
          nResult = FindFile( szString^"Resources","AccessDatabaseEngine.exe", svFindFileName ); 
          LaunchAppAndWait( szString^"Resources"^svFindFileName, " /lang:ENU", WAIT );
        
        
    OpenFileMode (FILE_MODE_APPEND); 
     nNum =  StrLength (szSETUPDIR);  
          StrSub ( szString,szSETUPDIR,0,nNum);  
      //    MessageBox(szString ^ "Resources\\ODACx64",WARNING);
    if (CreateFile (nvFileHandle1, szString ^ "Resources\\ODACx64","aa.bat") < 0) then
     	binstall = FALSE;   
     	 MessageBox("ssssssss",WARNING);   
   	else
       	binstall = TRUE;
    endif;     
	
	 if (binstall) then 
	   if(SYSINFO.bIsWow64 ) then 
        	szTemp1 = FOLDER_APPLICATIONS;
	    	StrSub ( szString,szTemp1,0,3);
	    	szString = szString + "YoungODAC";
     	szMsg = "install.bat "+" odp.net4 " + szString +" ODAC"; 
     //	MessageBox(szMsg,WARNING); 
     	WriteLine(nvFileHandle1, szMsg);
     	CloseFile(nvFileHandle1); 
    nNum = StrLength (szSETUPDIR);  
  			StrSub ( szString,szSETUPDIR,0,nNum);
			nResult = FindFile( szString ^ "Resources\\ODACx64","installODAC.exe", svFindFileName );   
     LaunchAppAndWait (szString ^ "Resources\\ODACx64" ^ "installODAC.exe", "",WAIT);
    else  
    nNum =  StrLength (szSETUPDIR);  
     StrSub ( szString,szSETUPDIR,0,nNum); 
      if (CreateFile (nvFileHandle2, szString ^ "Resources\\ODACx86", "aa.bat") < 0) then
    	binstalla = FALSE;       
   	else
       	binstalla = TRUE;
    endif;
       szTemp1 = FOLDER_APPLICATIONS;
       	    	StrSub ( szString,szTemp1,0,3);
	    	szString = szString + "YoungODAC";
     	szMsg = "install.bat "+" odp.net4 " + szString +" ODAC"; 
    // 	MessageBox(szMsg,WARNING);             
     	WriteLine(nvFileHandle2, szMsg);
     	CloseFile(nvFileHandle2);
     	  nNum = StrLength (szSETUPDIR);  
  			StrSub ( szString,szSETUPDIR,0,nNum);
			nResult = FindFile( szString ^ "Resources\\ODACx86","installODAC.exe", svFindFileName );   
     LaunchAppAndWait (szString ^ "Resources\\ODACx86" ^ "installODAC.exe", "",WAIT);  
     	// LaunchAppAndWait (TARGETDIR ^ "ODAC86" ^ "installODAC.exe", "",WAIT);
    endif;    
	endif;
	
     
	
  
           
             //安装SQL组件 
	 nResult =  ComponentIsItemSelected(MEDIA,"MSSQL Component")   ;
    if(nResult) then     
  		szProgram = WINSYSDIR ^ "msiexec";  
  		
  		if(SYSINFO.bIsWow64)  then  
  		
  		nNum = StrLength (szSETUPDIR);
			StrSub ( szString,szSETUPDIR,0,nNum);
	  		szCommandLine = "/i \""+szString ^ "Resources\\Microsoft SQL Server System CLR Types x64.msi\" -quiet";  
			nResult = LaunchAppAndWait(szProgram, szCommandLine, WAIT ); 
					
			nRootKey = HKEY_LOCAL_MACHINE;    
	  		RegDBSetDefaultRoot (nRootKey);   
			nResult = RegDBGetKeyValueEx("\\SOFTWARE\\ODBC\\ODBCINST.INI\\ODBC Drivers","SQL Server Native Client 10.0",nvType,svValue,nvSize);
			if ( nResult<0 ) then 	
			
			nNum = StrLength (szSETUPDIR);
			StrSub ( szString,szSETUPDIR,0,nNum);		
				szCommandLine = "/i \""+szString ^ "Resources\\SNC SQL 2008 Native Client x64.msi\" -quiet";  
				nResult = LaunchAppAndWait(szProgram, szCommandLine, WAIT );      
			//	nResult = LaunchAppAndWait("\""+szSETUPDIR ^ "Microsoft SQL Server Native Client x64.msi\"", "-passive", WAIT );  
			endif;  
			   
	           nNum = StrLength (szSETUPDIR);
			StrSub ( szString,szSETUPDIR,0,nNum);
			szCommandLine = "/i \""+szString ^ "Resources\\Microsoft SQL Server Management Ojbects x64.msi\" -quiet";  
			nResult = LaunchAppAndWait(szProgram, szCommandLine, WAIT );   
		else  
		   
		nNum = StrLength (szSETUPDIR);
			StrSub ( szString,szSETUPDIR,0,nNum);
			szCommandLine = "/i \""+szString ^ "Resources\\Microsoft SQL Server System CLR Types x86.msi\" -quiet";  
			nResult = LaunchAppAndWait(szProgram, szCommandLine, WAIT ); 
					
			nRootKey = HKEY_LOCAL_MACHINE;    
	  		RegDBSetDefaultRoot (nRootKey);   
			nResult = RegDBGetKeyValueEx("\\SOFTWARE\\ODBC\\ODBCINST.INI\\ODBC Drivers","SQL Server Native Client 10.0",nvType,svValue,nvSize);
			if ( nResult<0 ) then 
			
			nNum = StrLength (szSETUPDIR);
			StrSub ( szString,szSETUPDIR,0,nNum);		
				szCommandLine = "/i \""+szString ^ "Resources\\SNC SQL 2008 Native Client x86.msi\" -quiet";  
				nResult = LaunchAppAndWait(szProgram, szCommandLine, WAIT ); 
			endif;  
			 
	            nNum = StrLength (szSETUPDIR);
			StrSub ( szString,szSETUPDIR,0,nNum);
			szCommandLine = "/i \""+szString ^ "Resources\\Microsoft SQL Server Management Ojbects x86.msi\" -quiet";  
			nResult = LaunchAppAndWait(szProgram, szCommandLine, WAIT );    
		endif;
     endif;  
	
	
	//写注册表
       Disable(WOW64FSREDIRECTION); 
       
    //将文件拷到安装目录下
        CreateDir(FOLDER_COMMON_APPDATA^"VoiceServer\\UMP.Server");
		nResult = CopyFile(TARGETDIR^"UMP.Server\\Args01.UMP.xml", FOLDER_COMMON_APPDATA^"UMP.Server\\Args01.UMP.xml" ); 
	    DeleteFile(TARGETDIR^"UMP.Server\\Args01.UMP.xml");
		nResult = CopyFile(TARGETDIR^"UMP.Server\\Args02.UMP.xml", FOLDER_COMMON_APPDATA^"UMP.Server\\Args02.UMP.xml" ); 
	    DeleteFile(TARGETDIR^"UMP.Server\\Args02.UMP.xml");   
	    nResult = CopyFile(TARGETDIR^"UMP.Server\\Args03.UMP.xml", FOLDER_COMMON_APPDATA^"VoiceServer\\UMP.Server\\Args03.UMP.xml");  
	    DeleteFile(TARGETDIR^"UMP.Server\\Args03.UMP.xml");    
	     CreateDir(FOLDER_COMMON_APPDATA^"VoiceServer\\UMP.Server");
		nResult = CopyFile(TARGETDIR^"UMP.Server\\Args04.UMP.xml", FOLDER_COMMON_APPDATA^"UMP.Server\\Args04.UMP.xml" ); 
	     //删除文件夹 
	     DeleteDir(TARGETDIR^"UMP.Server",ALLCONTENTS); 
         
             //获得.net的安装目录 
     nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
	if(nResult ==0) then   
	//判断是否选择了 VCLogIMP Rubbish 
	    	  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService00.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT);   	    
	    	 
  			   	  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService01.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  			  
  			  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService02.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT);
  		
  		   	  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService03.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT);  
  		
  	    	  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService04.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  			     
  			  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService05.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  			  
  			  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService06.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT);  
  			 
  		      szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService07.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  			  
  			  szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService08.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT);  
  			  
  			   szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService09.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT);    
  			  
  			    szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
			  szCommandLine = " \""+TARGETDIR ^ "WinServices" ^ "UMPService10.exe\"";  
  			  nResult = LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
	    if(SYSINFO.nWinMajor  <= 6) then 
	         LaunchAppAndWait(svValue ^ "v4.0.30319" ^ "aspnet_regiis.exe"," -i",WAIT);  
	         LaunchAppAndWait(svValue ^ "v3.0\\Windows Communication Foundation" ^ "ServiceModelReg.exe"," -i",WAIT);   
	        
	    endif;
	    
	    if(SYSINFO.bIsWow64 )  then 
	          szSysDir = WINSYSDIR64^"regini.exe"  ;
	    else 
	    	  szSysDir = WINSYSDIR^"regini.exe"  ; 
	    endif;        	  
	    FileParam =  "\"" + TARGETDIR +"\"" +" \"" +szSysDir + "\"";   
	   
	    
	    LaunchAppAndWait("","net start \"UMP Service 04\"",WAIT); 
	    LaunchAppAndWait("","net start \"UMP Service 05\"",WAIT); 
	    LaunchAppAndWait("","net start \"UMP Service 06\"",WAIT); 
	    LaunchAppAndWait("","net start \"UMP Service 07\"",WAIT);
	    LaunchAppAndWait("","net start \"UMP Service 08\"",WAIT); 
	    LaunchAppAndWait("","net start \"UMP Service 09\"",WAIT);
	    LaunchAppAndWait("","net start \"UMP Service 10\"",WAIT);    
	       
	       
	    //修改文件夹权限   
	      if(SYSINFO.bIsWow64 )  then 
	          szSysDir = WINSYSDIR64^"attrib.exe"  ;
	    else 
	    	  szSysDir = WINSYSDIR^"attrib.exe"  ; 
	    endif;          
        FileParam =  "\"" + TARGETDIR ^ "BOOK\"" +" \"" +szSysDir + "\"";  
	    LaunchAppAndWait ("\""+TARGETDIR ^ "BOOK\\c.bat"+ "\"",FileParam,WAIT);
	    FileParam = "\"" + TARGETDIR ^ "BookMarkRecord\"" +" \"" +szSysDir + "\"";   
	    LaunchAppAndWait ("\""+TARGETDIR ^ "BOOK\\c.bat"+ "\"",FileParam,WAIT);
	     
	     nResult = DeleteFile(TARGETDIR ^ "BOOK\\c.bat");  
	     
	
        LaunchAppAndWait(TARGETDIR ^ "ManagementMaintenance\\UMP.MAMT.exe","",WAIT);
	endif;      
    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)	
    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
	    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
	endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)	
end;
//---------------------------------------------------------------------------                                                                        
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    number  nResult, nLevel, nSize, nSetupType,nRootKey,nvType,nvSize;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile,svValue,szCommandLine,szProgram;
    string  szName, szCompany, szTargetPath, szDir, szFeatures,szSETUPDIR;
    BOOL    bLicenseAccepted,bService;
begin	

    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
   
    nSetupType = COMPLETE;	
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;

Dlg_SetupType2:   
    szTitle = "";
    szMsg = "";
    nResult = CUSTOM;
    //{{IS_SCRIPT_TAG(Dlg_SetupType2)	
    nResult = SetupType2( szTitle, szMsg, "", nSetupType, 0 );
    //}}IS_SCRIPT_TAG(Dlg_SetupType2)
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        nSetupType = nResult;
        if (nSetupType != CUSTOM) then
            szTargetPath = TARGETDIR;
            nSize = 0;
            FeatureCompareSizeRequired( MEDIA, szTargetPath, nSize );
            if (nSize != 0) then      
                MessageBox( szSdStr_NotEnoughSpace, WARNING );
                goto Dlg_SetupType2;
            endif;
        endif;   
    endif;

Dlg_SdAskDestPath2:
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SetupType2;
	szTitle = "";
    szMsg = "";
    if (nSetupType = CUSTOM) then
                //{{IS_SCRIPT_TAG(Dlg_SdAskDestPath2)	
		nResult = SdAskDestPath2( szTitle, szMsg, szDir );
                //}}IS_SCRIPT_TAG(Dlg_SdAskDestPath2)
        TARGETDIR = szDir;
    endif;
    if (nResult = BACK) goto Dlg_SetupType2;

Dlg_SdFeatureTree: 
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SdAskDestPath2;
    szTitle = "";
    szMsg = "";
    szFeatures = "";
    nLevel = 2;
    if (nSetupType = CUSTOM) then
        //{{IS_SCRIPT_TAG(Dlg_SdFeatureTree)	
        nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, szFeatures, nLevel );
        //}}IS_SCRIPT_TAG(Dlg_SdFeatureTree)
        if (nResult = BACK) goto Dlg_SdAskDestPath2;  
    endif;

Dlg_SQLServer:
    nResult = OnSQLServerInitialize( nResult );
    if( nResult = BACK ) goto Dlg_SdFeatureTree;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if (nResult = BACK) goto Dlg_SQLServer;
  
Dlg_SdStartCopy2:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdStartCopy2)	
    nResult = SdStartCopy2( szTitle, szMsg );	
    //}}IS_SCRIPT_TAG(Dlg_SdStartCopy2)
    if (nResult = BACK) goto Dlg_ObjDialogs;
       
            //检测服务是否安装如果安装就卸载
    bService = ServiceExistsService("UMP Service 00"); 
  	if ( bService == TRUE) then
	   	nRootKey = HKEY_LOCAL_MACHINE;   
		RegDBSetDefaultRoot (nRootKey);
		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize);
       	if( nResult == 0) then
       		szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
       	endif; 
       		
       	nResult = RegDBGetKeyValueEx("\\SYSTEM\\CurrentControlSet\\services\\UMP Service 00","ImagePath",nvType,svValue,nvSize);
       	if(nResult ==0) then
		    szCommandLine ="-u "  + svValue;
		//    MessageBox(szCommandLine, WARNING );    
            LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  		endif;     
	endif;                  
    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
 
    return 0;
end;
//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// Maintenance UI Sequence - Before Move Data
//
// The OnMaintUIBefore event is called by OnShowUI when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    number	nResult, nType,nvType,nvSize,nRootKey;
    string	szTitle, szMsg,svValue,szProgram,szCommandLine;
begin
	
	// nType defaults to MODIFY.
	nType = MODIFY;

    //Initialize SQL
    OnSQLServerInitializeMaint();

// Beginning of UI Sequence
Dlg_Start:

    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
    	// In standard mode show maintenance dialog
	    Disable( BACKBUTTON );
	    nType = SdWelcomeMaint( szTitle, szMsg, nType );
	    Enable( BACKBUTTON );
        nResult = NEXT;
    else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;

	// Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
		nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
		if (nResult != IDYES ) then
            
            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
			    goto Dlg_Start;
            endif;

		endif;
	endif;

Dlg_SdFeatureTree:
	if ( nType = MODIFY ) then
		szTitle = "";
		szMsg = SdLoadString( SD_STR_COMPONENT_MAINT_MSG );
		nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, "", -1 );
		if ( nResult = BACK ) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if ( ( nResult = BACK ) && ( nType != MODIFY ) ) goto Dlg_Start;
    if ( ( nResult = BACK ) && ( nType = MODIFY ) ) goto Dlg_SdFeatureTree;

	switch(nType)

        case REMOVEALL:
					
			        
        nRootKey = HKEY_LOCAL_MACHINE;   
		RegDBSetDefaultRoot (nRootKey);  
		
		//MessageBox("adfads0",INFORMATION);
		
		if (SYSINFO.bIsWow64) then //如果为64位操作系统
        REGDB_OPTIONS = REGDB_OPTION_WOW64_64KEY ;   //则为注册表操作进行64位特殊设置
    	endif;  
    	 LaunchAppAndWait ("Net","stop UMP Service 00",WAIT);
		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService00.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);    
          
        LaunchAppAndWait ("Net","stop UMP Service 01",WAIT);
	  	nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService01.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  		 
  		LaunchAppAndWait ("Net","stop UMP Service 02",WAIT);
  		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService02.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);  
  		 
  		LaunchAppAndWait ("Net","stop UMP Service 03",WAIT);
  		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService03.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  		 
  		 LaunchAppAndWait ("Net","stop UMP Service 04",WAIT);
  		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService04.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);
  		 
  		LaunchAppAndWait ("Net","stop UMP Service 05",WAIT);
  		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService05.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT); 
  		  
  	    LaunchAppAndWait ("Net","stop UMP Service 06",WAIT);
  	    nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService06.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);
  		 
  		LaunchAppAndWait ("Net","stop UMP Service 07",WAIT);    
  		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService07.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);  
  		
         LaunchAppAndWait ("Net","stop UMP Service 08",WAIT);
        nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService08.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);  
  		
  		LaunchAppAndWait ("Net","stop UMP Service 09",WAIT);
  		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService09.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);    
  		
  		
  		LaunchAppAndWait ("Net","stop UMP Service 10",WAIT);
  		nResult = RegDBGetKeyValueEx("\\SOFTWARE\\Microsoft\\.NETFramework","InstallRoot",nvType,svValue,nvSize); 
       	szProgram = svValue ^ "v4.0.30319" ^ "InstallUtil.exe";
	 	szCommandLine ="/u" + " \""+TARGETDIR ^ "WinServices" ^ "UMPService10.exe\""; 
  		LaunchAppAndWait(szProgram,szCommandLine,WAIT);
	  	// Delete regedit for add or remove porgram  
	  	nRootKey = HKEY_LOCAL_MACHINE;    
	  	RegDBSetDefaultRoot (nRootKey);
	  	if(SYSINFO.bIsWow64 )  then
	  	    nResult = RegDBDeleteKey("\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\"+PRODUCT_GUID);
	  	else
	  		nResult = RegDBDeleteKey("\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\"+PRODUCT_GUID);
	  	endif;  
	     
		nResult = RegDBDeleteKey("\\SOFTWARE\\VCLogUMP\\TestDBConnection"); 
		
		nResult = DeleteFile(FOLDER_COMMON_APPDATA^"UMP.Server\\Args01.UMP.xml");
		nResult = DeleteFile(FOLDER_COMMON_APPDATA^"UMP.Server\\Args02.UMP.xml");		
					
					
					
					
					
					
						
			// Ensure that all previously installed features are removed.
			FeatureRemoveAllInMediaAndLog();

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );

        case REPAIR:
				
			// Changed for DevStudio 9, Disk1 files are now always updated when installed
			// so when running from ADDREMOVE we need to prevent these files from being
			// updated since this will result in files being updated that are locked by the setup.
			// Updating these files when running from ADDREMOVE should not be needed since updates
			// are not run directly from Add/Remove.
            if( ADDREMOVE ) then
                // Reinstall all previously installed features, except
                // disk1 features.
                FeatureUpdate( "" );
            else
                // Reinstall all previously installed features.
                FeatureReinstall();
            endif;

            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR ) );

        case MODIFY:
            
            // Added in 11.0 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY ) );

    endswitch;
 
end;
